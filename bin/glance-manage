#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Glance Management Utility
"""

# FIXME(sirp): When we have glance-admin we can consider merging this into it
# Perhaps for consistency with Nova, we would then rename glance-admin ->
# glance-manage (or the other way around)

import gettext
import os
import sys

# If ../glance/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'glance', '__init__.py')):
    sys.path.insert(0, possible_topdir)

gettext.install('glance', unicode=1)

from glance.common import config
from glance.common import exception
from glance.openstack.common import cfg
import glance.db
import glance.db.api
import glance.db.migration

CONF = cfg.CONF


def do_db_version(args):
    """Print database's current migration level"""
    print glance.db.migration.db_version()


def do_upgrade(args):
    """Upgrade the database's migration level"""
    version = args.pop(0) if args else None
    glance.db.migration.upgrade(version)


def do_downgrade(args):
    """Downgrade the database's migration level"""
    if not args:
        raise exception.MissingArgumentError(
            "downgrade requires a version argument")

    version = args.pop(0)
    glance.db.migration.downgrade(version)


def do_version_control(args):
    """Place a database under migration control"""
    version = args.pop(0) if args else None
    glance.db.migration.version_control(version)


def do_db_sync(args):
    """
    Place a database under migration control and upgrade,
    creating first if necessary.
    """
    # override auto-create flag, as complete DB should always
    # be created on sync if not already existing
    CONF.register_opts(glance.db.api.db_opts)
    CONF.set_override('db_auto_create', True)
    glance.db.api.configure_db()
    version = args.pop(0) if args else None
    current_version = args.pop(0) if args else None
    glance.db.migration.db_sync(version, current_version)


def dispatch_cmd(args):
    """Search for do_* cmd in this module and then run it"""
    cmd = args.pop(0)
    try:
        cmd_func = globals()['do_%s' % cmd]
    except KeyError:
        sys.exit("ERROR: unrecognized command '%s'" % cmd)

    try:
        cmd_func(args)
    except exception.GlanceException, e:
        sys.exit("ERROR: %s" % e)


def main():
    try:
        # We load the glance-registry config section because
        # sql_connection is only part of the glance registry.
        glance.db.add_cli_options()

        default_cfg_files = cfg.find_config_files(project='glance',
                                                  prog='glance-registry')

        args = config.parse_args(default_config_files=default_cfg_files,
                                 usage="%prog [options] <cmd>")
        config.setup_logging()
    except RuntimeError, e:
        sys.exit("ERROR: %s" % e)

    if not args:
        CONF.print_usage()
        sys.exit(1)

    dispatch_cmd(args)


if __name__ == '__main__':
    main()
